// JAVA program to implement Priority Scheduling
import java.util.*;
 
public class Priority {
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("enter no of process: ");
		int n = sc.nextInt();
		int pid[] = new int[n];    // process ids
		int p[] = new int[n];      // priority
		int bt[] = new int[n];     // burst or execution times
		int ct[] = new int[n];     // completion times
		int ta[] = new int[n];     // turn around times
		int wt[] = new int[n];     // waiting times
		int temp;
		float avgwt=0,avgta=0;
		 
		for(int i = 0; i < n; i++)
		{
			System.out.println("enter process " + (i+1) + " priority : ");
			p[i] = sc.nextInt();
			System.out.println("enter process " + (i+1) + " brust time: ");
			bt[i] = sc.nextInt();
			pid[i] = i+1;
		}
		 
		//Sorting by Arrival
		for(int i = 0 ; i <n; i++)
		{
			for(int  j=0;  j < n-(i+1) ; j++)
			{
				if( p[j] > p[j+1] )
				{
					temp = p[j];
					p[j] = p[j+1];
					p[j+1] = temp;
					
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					
					temp = pid[j];
					pid[j] = pid[j+1];
					pid[j+1] = temp;
				}
			}
		}
		
		// Calculate Completion Time
		for(int  i = 0 ; i < n; i++)
		{
			if( i == 0)
			{
				ct[i] =  bt[i];
			}
			else
			{
				ct[i] = ct[i-1] + bt[i];
			}
			ta[i] = ct[i] ;           		  // turnaround time= completion time
			wt[i] = ta[i] - bt[i] ;           // waiting time= turnaround time- burst time
			avgwt += wt[i] ;                  // total waiting time
			avgta += ta[i] ;                  // total turnaround time
		}
		//Printing the output
		System.out.println("\npid  priority  brust  complete turn waiting");
		for(int  i = 0 ; i< n;  i++)
		{
			System.out.println(pid[i] + "  \t " + p[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + ta[i] + "\t"  + wt[i] ) ;
		}
		sc.close();
		
		System.out.println("\naverage waiting time: "+ (avgwt/n));     // printing average waiting time.
		System.out.println("average turnaround time:"+(avgta/n));    // printing average turnaround time.
	}
}
